{"version":3,"sources":["ScrollableTabbar.tsx"],"names":["React","useEffect","useState","useRef","View","Image","ScrollView","Dimensions","TabbarItem","tabbarViewStyles","styles","SCREEN_WIDTH","get","width","ScrollableTabbar","items","onPress","selectedIndex","firstValueInView","isManualSelect","scrollDirection","itemWidth","itemHeight","itemSpaceBetween","activeColor","inactiveColor","fontSize","icon","scrollViewRef","itemPositions","setItemPositions","getValues","map","item","index","nativeEvent","positions","push","x","layout","current","forEach","itemPosition","scrollTo","animated","container","iconView","contentContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport {\n  View,\n  Image,\n  ScrollView,\n  Dimensions,\n  ImageSourcePropType,\n} from 'react-native';\n\nimport TabbarItem from './TabbarItem';\n\nimport { tabbarViewStyles as styles } from './styles';\n\nexport interface Props {\n  items: Array<string>;\n  onPress: (index: number) => void;\n  selectedIndex: number;\n  firstValueInView: string;\n  isManualSelect: boolean;\n  scrollDirection: string;\n  itemWidth?: number;\n  itemHeight?: number;\n  itemSpaceBetween?: number;\n  activeColor?: string;\n  inactiveColor?: string;\n  fontSize?: number;\n  icon?: ImageSourcePropType;\n}\n\ntype positionType = {\n  item: string;\n  x: number;\n  width: number;\n  index: number;\n};\n\nconst SCREEN_WIDTH = Dimensions.get('window').width;\n\nconst ScrollableTabbar: React.FC<Props> = ({\n  items,\n  onPress,\n  selectedIndex,\n  firstValueInView,\n  isManualSelect,\n  scrollDirection,\n  itemWidth = 100,\n  itemHeight = 50,\n  itemSpaceBetween = 8,\n  activeColor = 'yellow',\n  inactiveColor = 'transparent',\n  fontSize = 14,\n  icon,\n}) => {\n  const scrollViewRef = useRef<any>(null);\n\n  const [itemPositions, setItemPositions] = useState<Array<positionType>>([]);\n\n  const getValues = () => {\n    return items.map((item, index) => (\n      <TabbarItem\n        key={index}\n        item={item}\n        selected={index === selectedIndex}\n        isFirstInView={firstValueInView === item}\n        isManualSelect={isManualSelect}\n        onPress={() => onPress(index)}\n        onLayout={({ nativeEvent }) => {\n          const positions = [...itemPositions];\n\n          positions.push({\n            item,\n            x: nativeEvent.layout.x,\n            width: nativeEvent.layout.width,\n            index: index,\n          });\n          setItemPositions(positions);\n        }}\n        itemWidth={itemWidth}\n        itemHeight={itemHeight}\n        activeColor={activeColor}\n        inactiveColor={inactiveColor}\n        fontSize={fontSize}\n      />\n    ));\n  };\n\n  useEffect(() => {\n    if (isManualSelect) return;\n\n    if (scrollViewRef && scrollViewRef.current) {\n      itemPositions.forEach((itemPosition: positionType) => {\n        if (\n          firstValueInView === itemPosition.item &&\n          scrollDirection === 'DOWN' &&\n          itemPosition.x > SCREEN_WIDTH - itemWidth * 2\n        ) {\n          scrollViewRef.current.scrollTo({\n            x: itemPosition.x - SCREEN_WIDTH + itemWidth * 2,\n            animated: true,\n          });\n        } else if (\n          firstValueInView === itemPosition.item &&\n          scrollDirection === 'UP'\n        ) {\n          scrollViewRef.current.scrollTo({\n            x: itemPosition.x - itemWidth,\n            animated: true,\n          });\n        }\n      });\n    }\n  }, [firstValueInView]);\n\n  return (\n    <View style={styles.container}>\n      {icon && (\n        <View style={styles.iconView}>\n          <Image source={icon} style={styles.icon} />\n        </View>\n      )}\n      <ScrollView\n        ref={scrollViewRef}\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        contentContainerStyle={styles.contentContainer}\n        decelerationRate=\"fast\"\n        snapToInterval={itemWidth + itemSpaceBetween}\n        snapToAlignment=\"start\"\n      >\n        {getValues()}\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default ScrollableTabbar;\n"]}