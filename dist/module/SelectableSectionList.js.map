{"version":3,"sources":["SelectableSectionList.tsx"],"names":["React","useEffect","useState","useRef","View","SectionList","Text","StyleSheet","sectionListGetItemLayout","ScrollableTabbar","contentViewStyles","styles","getData","items","flattenedList","sort","a","b","title","sectionList","map","section","index","data","forEach","sectionItem","sectionIndex","push","obj","getTabbarItems","tabbarItems","item","some","tabbarItem","scrollOffset","SelectableSectionList","renderItem","itemHeight","tabbarItemWidth","tabbarItemHeight","tabbarItemSpaceBetween","tabbarItemActiveColor","tabbarItemInactiveColor","tabbarItemFontSize","tabbarIcon","flatListRef","sectionsFeed","setSectionsFeed","setFlattenedList","setTabbarItems","selectedIndex","setSelectedIndex","firstIndexInView","setFirstIndexInView","isManualSelect","setIsManualSelect","scrollDirection","setScrollDirection","sectionHeaderHeight","setSectionHeaderHeight","layoutHeight","setLayoutHeight","handleTabItemPress","getItemLayout","getItemHeight","getSeparatorHeight","hairlineWidth","getSectionHeaderHeight","getSectionFooterHeight","listHeaderHeight","current","scrollToLocation","animated","itemIndex","viewPosition","listObject","renderFlatlist","contentContainer","args","sectionHeader","nativeEvent","layout","height","layoutMeasurement","Math","floor","contentOffset","y","length","border","toString","useMemo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  View,\n  SectionList,\n  Text,\n  StyleSheet,\n  ImageSourcePropType,\n} from \"react-native\";\nimport sectionListGetItemLayout from \"react-native-section-list-get-item-layout\";\n\nimport ScrollableTabbar from \"./ScrollableTabbar\";\n\nimport { contentViewStyles as styles } from \"./styles\";\n\ninterface Props {\n  data: Array<any>;\n  renderItem: (item: any) => JSX.Element;\n  itemHeight: number;\n  tabbarItemWidth?: number;\n  tabbarItemHeight?: number;\n  tabbarItemSpaceBetween?: number;\n  tabbarItemActiveColor?: string;\n  tabbarItemInactiveColor?: string;\n  tabbarItemFontSize?: number;\n  tabbarIcon?: ImageSourcePropType;\n}\n\n// DATA IS SORTED ALPHABETICALL\n// TO KEEP TRACK OF SECTION IN VIEW DURING\n// SCROLL, A SECTIONINDEX IS ADDED TO EACH\n// LISTITEM AND A SECOND FLATTENDED LIST IS\n// CREATED (FOR COMPARISSON)\nconst getData = (items: Array<any>) => {\n  const flattenedList: Array<any> = [];\n\n  items.sort((a, b) => {\n    if (a.title > b.title) {\n      return 1;\n    }\n\n    return -1;\n  });\n\n  const sectionList: Array<any> = items.map((section, index) => {\n    section.data.forEach((sectionItem: any) => {\n      if (typeof sectionItem === \"object\") {\n        sectionItem.sectionIndex = index;\n        flattenedList.push(sectionItem);\n      } else if (typeof sectionItem === \"string\") {\n        const obj = { title: sectionItem, sectionIndex: index };\n        flattenedList.push(obj);\n      }\n    });\n\n    return section;\n  });\n\n  return { sectionList, flattenedList };\n};\n\n// TAB ITEMS CREATED FROM SECTION DATA ADDED TO SECTIONLIST\nconst getTabbarItems = (items: Array<any>) => {\n  const tabbarItems: Array<string> = [];\n\n  items.forEach((item: any) => {\n    if (!tabbarItems.some((tabbarItem) => tabbarItem === item.title)) {\n      tabbarItems.push(item.title);\n    }\n  });\n\n  return tabbarItems;\n};\n\nlet scrollOffset = 0;\n\nconst SelectableSectionList: React.FC<Props> = ({\n  data,\n  renderItem,\n  itemHeight,\n  tabbarItemWidth,\n  tabbarItemHeight,\n  tabbarItemSpaceBetween,\n  tabbarItemActiveColor,\n  tabbarItemInactiveColor,\n  tabbarItemFontSize,\n  tabbarIcon,\n}) => {\n  const flatListRef = useRef<SectionList>(null);\n\n  const [sectionsFeed, setSectionsFeed] = useState<Array<any>>([]);\n  const [flattenedList, setFlattenedList] = useState<Array<any>>([]);\n\n  const [tabbarItems, setTabbarItems] = useState<Array<string>>([]);\n\n  const [selectedIndex, setSelectedIndex] = useState<number>(0);\n  const [firstIndexInView, setFirstIndexInView] = useState<number>(0);\n  const [isManualSelect, setIsManualSelect] = useState<boolean>(false);\n  const [scrollDirection, setScrollDirection] = useState<string>(\"DOWN\");\n\n  const [sectionHeaderHeight, setSectionHeaderHeight] = useState<number>(40);\n  const [layoutHeight, setLayoutHeight] = useState<number>(0);\n\n  const handleTabItemPress = (index: number) => {\n    setSelectedIndex(index);\n    setIsManualSelect(true);\n  };\n\n  const getItemLayout = sectionListGetItemLayout({\n    getItemHeight: () => itemHeight,\n    getSeparatorHeight: () => StyleSheet.hairlineWidth,\n    getSectionHeaderHeight: () => sectionHeaderHeight,\n    getSectionFooterHeight: () => 0,\n    listHeaderHeight: 0,\n  });\n\n  useEffect(() => {\n    if (!isManualSelect) return;\n\n    if (flatListRef && flatListRef.current) {\n      flatListRef.current.scrollToLocation({\n        animated: true,\n        itemIndex: 0,\n        sectionIndex: selectedIndex,\n        viewPosition: 0,\n      });\n    }\n  }, [selectedIndex]);\n\n  useEffect(() => {\n    const listObject = getData(data);\n\n    setSectionsFeed(listObject.sectionList);\n    setFlattenedList(listObject.flattenedList);\n    setTabbarItems(getTabbarItems(listObject.sectionList));\n  }, [data]);\n\n  const renderFlatlist = () => (\n    <SectionList\n      ref={flatListRef}\n      contentContainerStyle={styles.contentContainer}\n      sections={sectionsFeed}\n      renderItem={(args) => renderItem(args)}\n      getItemLayout={(data: any, index: number) => getItemLayout(data, index)}\n      renderSectionHeader={({ section: { title } }) => (\n        <Text\n          style={styles.sectionHeader}\n          onLayout={({ nativeEvent }) =>\n            setSectionHeaderHeight(nativeEvent.layout.height)\n          }\n        >\n          {title}\n        </Text>\n      )}\n      scrollEventThrottle={16}\n      onScroll={({ nativeEvent }) => {\n        if (layoutHeight === 0) {\n          setLayoutHeight(nativeEvent.layoutMeasurement.height);\n        }\n\n        //  IDENTIFY SECTION IN VIEW\n        const itemIndex = Math.floor(\n          nativeEvent.contentOffset.y /\n            (itemHeight +\n              ((sectionHeaderHeight + StyleSheet.hairlineWidth) *\n                sectionsFeed.length) /\n                flattenedList.length)\n        );\n\n        // EXIT IF SCROLL OUT OF BOUNDS\n        if (itemIndex < 0 || itemIndex > flattenedList.length - 1) return;\n\n        // SET FIRST SECTION IN VIEW (TOP)\n        const sectionIndex = flattenedList[itemIndex].sectionIndex;\n        setFirstIndexInView(sectionIndex);\n\n        // SET SCROLLDIRECTION\n        if (nativeEvent.contentOffset.y > scrollOffset) {\n          setScrollDirection(\"DOWN\");\n        } else {\n          setScrollDirection(\"UP\");\n        }\n        scrollOffset = nativeEvent.contentOffset.y;\n      }}\n      onScrollBeginDrag={() => {\n        setSelectedIndex(-1);\n        setIsManualSelect(false);\n      }}\n      ItemSeparatorComponent={() => <View style={styles.border} />}\n      keyExtractor={(item, index) => index.toString()}\n    />\n  );\n\n  return (\n    <>\n      <ScrollableTabbar\n        items={tabbarItems}\n        onPress={(index: number) => handleTabItemPress(index)}\n        selectedIndex={selectedIndex}\n        firstValueInView={\n          data[firstIndexInView] ? data[firstIndexInView].title : \"\"\n        }\n        isManualSelect={isManualSelect}\n        scrollDirection={scrollDirection}\n        itemWidth={tabbarItemWidth}\n        itemHeight={tabbarItemHeight}\n        itemSpaceBetween={tabbarItemSpaceBetween}\n        activeColor={tabbarItemActiveColor}\n        inactiveColor={tabbarItemInactiveColor}\n        fontSize={tabbarItemFontSize}\n        icon={tabbarIcon}\n      />\n      {React.useMemo(() => renderFlatlist(), [sectionsFeed])}\n    </>\n  );\n};\n\nexport default SelectableSectionList;\n"]}