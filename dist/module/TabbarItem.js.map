{"version":3,"sources":["TabbarItem.tsx"],"names":["React","View","Text","TouchableOpacity","tabbarItemStyles","styles","TabbarItem","item","onPress","onLayout","selected","isFirstInView","isManualSelect","itemWidth","itemHeight","activeColor","inactiveColor","fontSize","container","width","height","innerContainer","backgroundColor","itemTitle"],"mappings":"AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,SACEC,IADF,EAEEC,IAFF,EAGEC,gBAHF,QAMO,cANP;AAQA,SAASC,gBAAgB,IAAIC,MAA7B,QAA2C,UAA3C;;AAgBA,MAAMC,UAA2B,GAAG,CAAC;AACnCC,EAAAA,IADmC;AAEnCC,EAAAA,OAFmC;AAGnCC,EAAAA,QAHmC;AAInCC,EAAAA,QAJmC;AAKnCC,EAAAA,aALmC;AAMnCC,EAAAA,cANmC;AAOnCC,EAAAA,SAPmC;AAQnCC,EAAAA,UARmC;AASnCC,EAAAA,WATmC;AAUnCC,EAAAA,aAVmC;AAWnCC,EAAAA;AAXmC,CAAD,KAY9B;AACJ,sBACE,oBAAC,gBAAD;AACE,IAAA,QAAQ,EAAER,QADZ;AAEE,IAAA,KAAK,EAAE,CACLJ,MAAM,CAACa,SADF,EAEL;AACEC,MAAAA,KAAK,EAAEN,SADT;AAEEO,MAAAA,MAAM,EAAEN;AAFV,KAFK,GAFT;AAUE,IAAA,OAAO,EAAEN,OAVX;AAWE,IAAA,aAAa,EAAE;AAXjB,kBAaE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACLH,MAAM,CAACgB,cADF,EAEL;AACEC,MAAAA,eAAe,EACZV,cAAc,IAAIF,QAAnB,IAAiC,CAACE,cAAD,IAAmBD,aAApD,GACII,WADJ,GAEIC;AAJR,KAFK;AADT,kBAWE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACX,MAAM,CAACkB,SAAR,EAAmB;AAAEN,MAAAA;AAAF,KAAnB,CAAb;AAA+C,IAAA,aAAa,EAAE;AAA9D,KACGV,IADH,CAXF,CAbF,CADF;AA+BD,CA5CD;;AA8CA,eAAeD,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  GestureResponderEvent,\n  LayoutChangeEvent,\n} from 'react-native';\n\nimport { tabbarItemStyles as styles } from './styles';\n\nexport interface Props {\n  item: string;\n  onPress: (event: GestureResponderEvent) => void;\n  onLayout: (event: LayoutChangeEvent) => void;\n  selected: boolean;\n  isFirstInView: boolean;\n  isManualSelect: boolean;\n  itemWidth?: number;\n  itemHeight?: number;\n  activeColor?: string;\n  inactiveColor?: string;\n  fontSize?: number;\n}\n\nconst TabbarItem: React.FC<Props> = ({\n  item,\n  onPress,\n  onLayout,\n  selected,\n  isFirstInView,\n  isManualSelect,\n  itemWidth,\n  itemHeight,\n  activeColor,\n  inactiveColor,\n  fontSize,\n}) => {\n  return (\n    <TouchableOpacity\n      onLayout={onLayout}\n      style={[\n        styles.container,\n        {\n          width: itemWidth,\n          height: itemHeight,\n        },\n        ,\n      ]}\n      onPress={onPress}\n      activeOpacity={0.8}\n    >\n      <View\n        style={[\n          styles.innerContainer,\n          {\n            backgroundColor:\n              (isManualSelect && selected) || (!isManualSelect && isFirstInView)\n                ? activeColor\n                : inactiveColor,\n          },\n        ]}\n      >\n        <Text style={[styles.itemTitle, { fontSize }]} numberOfLines={1}>\n          {item}\n        </Text>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nexport default TabbarItem;\n"]}